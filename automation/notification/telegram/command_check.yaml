alias: 'Telegram command check'
initial_state: 'on'
trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: '/check'
action:
  - service: telegram_bot.send_message
    data_template:
      message: >
        The alarm is {{ states('alarm_control_panel.ha_alarm') }}
        
        The zigbee bridge is {{ states('sensor.zigbee2mqtt_bridge_state') }} and router is {{ states('binary_sensor.zigbee2mqtt_router_1') }}

        {% set rooms_occupied = dict((states|selectattr('entity_id', 'in', state_attr('group.my_room_status', 'entity_id'))|list)|groupby('state'))['on']|length -%}
        {%- if rooms_occupied > 0 -%}
          The following rooms are occupied: {{ dict((states|selectattr('entity_id', 'in', state_attr('group.my_room_status', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}
        {%- else -%}
          No rooms are occupied
        {%- endif %}

        {%- set lights_on = dict(states|selectattr('entity_id', 'in', state_attr('group.my_lights', 'entity_id')|list)|groupby('state'))['on']|length -%}
        {%- set doors_open = dict(states|selectattr('entity_id', 'in', state_attr('group.my_exterior_doors', 'entity_id')|list)|groupby('state'))['on']|length -%}
        {%- set windows_upstairs = dict(states|selectattr('entity_id', 'in', state_attr('group.my_upstairs_windows', 'entity_id')|list)|groupby('state'))['on']|length -%}
        {%- set windows_downstairs = dict(states|selectattr('entity_id', 'in', state_attr('group.my_downstairs_windows', 'entity_id')|list)|groupby('state'))['on']|length %}

        There are {{ lights_on }} lights on{% if lights_on != 0 %} ({{ dict(states|selectattr('entity_id', 'in', state_attr('group.my_lights', 'entity_id')|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}){%- endif -%},
        {{ doors_open }} doors open{% if doors_open != 0 %} ({{ dict(states|selectattr('entity_id', 'in', state_attr('group.my_exterior_doors', 'entity_id')|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}){%- endif -%},
        {{ windows_downstairs }} windows open downstairs{% if windows_downstairs != 0 %} ({{ dict(states|selectattr('entity_id', 'in', state_attr('group.my_downstairs_windows', 'entity_id')|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}){%- endif -%}, and
        {{ windows_upstairs }} windows open upstairs{% if windows_upstairs != 0 %} ({{ dict(states|selectattr('entity_id', 'in', state_attr('group.my_upstairs_windows', 'entity_id')|list)|groupby('state'))['on']|map(attribute='name')|list|join(', ') }}){%- endif %}

        {% if is_state('input_boolean.person3_in_bed','on') -%}
          person3 has been in bed for {{ relative_time(states.input_boolean.person3_in_bed.last_changed) }}
        {%- elif is_state('input_boolean.person3_home','on') -%}
          person3 has been home for {{ relative_time(states.input_boolean.person3_home.last_changed) }}
        {%- elif is_state('device_tracker.person3_mobile','not_home') -%}
          person3 has been at {{ state_attr('sensor.person3s_time_to_home','origin_name') }}, {{ states('input_text.person_person3') }}, for {{ relative_time(states.device_tracker.person3_mobile.last_changed) }}
        {%- else -%}
          person3 has been {{ states('input_text.person_person3') }} for {{ relative_time(states.device_tracker.person3_mobile.last_changed) }}
        {%- endif %}

        {% if is_state('input_boolean.person1_in_bed','on') -%}
          person1 has been in bed for {{ relative_time(states.input_boolean.person1_in_bed.last_changed) }}
        {%- elif is_state('input_boolean.person1_home','on') -%}
          person1 has been home for {{ relative_time(states.input_boolean.person1_home.last_changed) }}
        {% elif is_state('device_tracker.person1_mobile','not_home') -%}
          person1 has been at {{ state_attr('sensor.person1s_time_to_home','origin_name') }}, {{ states('input_text.person_person1') }}, for {{ relative_time(states.device_tracker.person1_mobile.last_changed) }}
        {%- else -%}
          person1 has been {{ states('input_text.person_person1') }} for {{ relative_time(states.device_tracker.person1_mobile.last_changed) }}
        {%- endif %}

        {% if ( states('device_tracker.car_gps') != states('device_tracker.person2_mobile_gps') ) and (not is_state('device_tracker.car_gps','not_home')) -%}
          The car is at {{ states('device_tracker.car_gps') }}
        {%- endif -%}
