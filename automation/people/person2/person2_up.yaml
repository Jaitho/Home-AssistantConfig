alias: 'Rob up'
initial_state: 'on'
trigger:
  # Music is playing
  - platform: state
    entity_id: 
      - media_player.master_bedroom_speaker
      - media_player.person2
    to: 'playing'
  # Phone or tablet is unplugged
  - platform: state
    entity_id: 
      - input_boolean.person2_phone_charging
      - input_boolean.person2_tablet_charging
    to: 'off'
  # Bedhead light is on
  - platform: state
    entity_id: 
      - light.master_bedroom_bedhead
      - light.yeelight_strip1_286c07afc307
    to: 'on'
    for:
      minutes: 1
condition:
  - condition: state
    entity_id: input_boolean.person2_in_bed
    state: 'on'
  - condition: state
    entity_id: input_boolean.person2_home
    state: 'on'
  - condition: time
    after: '03:00:00'
    before: '21:00:00'
action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.person2_in_bed
  - service: notify.logfile
    data_template:
      message: >
        Turned off person2 in bed because the {{ trigger.to_state.name }} was {{ trigger.to_state.state }} at {{ now() }}
  - condition: and
    conditions:
    # Working, but not from home, and the alarm got me up
    - condition: state
      entity_id: calendar.person2_holiday
      state: 'off'
    - condition: state
      entity_id: input_boolean.person2_work_home
      state: 'off'
    - condition: state
      entity_id: media_player.person2
      state: 'playing'
  - service: notify.logfile
    data_template:
      message: "Not on holiday, not working from home, alarm is playing..."
  # Update the trains
  - service: homeassistant.update_entity
    entity_id: sensor.next_train_to_xyz
  - service: notify.logfile
    data_template:
      message: "Waiting up to 30 seconds for the train information to update"
  # Wait for that to happen
  - wait_template: "{{ (as_timestamp(now()) - as_timestamp(states.sensor.next_train_to_xyz.last_updated))|int < 90 }}"
    timeout: '00:00:30'
    continue_on_timeout: 'true'
  - service: notify.logfile
    data_template:
      message: "Waiting up to 30 seconds for the radio to turn off"
  # And wait for the radio to be turned off (that is, I'm actually awake)
  - wait_template: "{{ is_state('media_player.person2','off') or is_state('media_player.person2','paused') }}"
    timeout: '00:02:00'
    continue_on_timeout: 'true'
  - service: notify.logfile
    data_template:
      message: "Announcing state of the trains"
  # Now tell me about it
  - service: media_player.turn_on
    data:
      entity_id: media_player.cast_master_bedroom_speaker
  - service: media_player.volume_set
    data_template:
      volume_level: 0.3
      entity_id: media_player.cast_master_bedroom_speaker
  - delay: '00:00:01'
  - service: tts.google_cloud_say
    data_template:
      entity_id: media_player.cast_master_bedroom_speaker
      message: >-
        {%- macro getTrainStatus() -%}
        {%- for train in state_attr('sensor.next_train_to_xyz', 'next_trains') -%}
        {% if not loop.first %}
          {%- if ( train.status == "ON TIME" or train.status == "EARLY" ) -%} X {%- endif -%}
        {% endif %}
        {%- endfor -%}
        {%- endmacro -%}
        Good morning, {{ getTrainStatus()|length }} of {{ state_attr('sensor.next_train_to_xyz', 'next_trains')|length }} trains to work are on time. {% if(getTrainStatus()|length) != (state_attr('sensor.next_train_to_xyz','next_trains')|length) %}{%- for train in state_attr('sensor.next_train_to_xyz', 'next_trains') %}{% if not loop.first %}The {{ train.scheduled }} is {{ train.status }} {% if ( train.status != "ON TIME" and train.status != "EARLY" and train.status != "CANCELLED" ) %} at {{ train.estimated }}{%- endif %}.{% endif %} {% endfor -%}{%- endif -%}
  - delay: '00:00:05'
  - wait_template: "{{ is_state('media_player.cast_master_bedroom_speaker','idle') }}"
  - service: media_player.turn_off
    data:
      entity_id: media_player.cast_master_bedroom_speaker
